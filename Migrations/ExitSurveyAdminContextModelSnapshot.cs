// <auto-generated />
using System;
using ExitSurveyAdmin.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExitSurveyAdmin.Migrations
{
    [DbContext(typeof(ExitSurveyAdminContext))]
    partial class ExitSurveyAdminContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1");

            modelBuilder.Entity("ExitSurveyAdmin.Models.AdminUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLoginTs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTs")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressPostCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressProvince")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackDated")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassificationGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentEmployeeStatusCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExitCount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GovernmentEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobFunctionCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastDayWorkedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ministry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OriginalHireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceYears")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentEmployeeStatusCode");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.EmployeeActionTypeEnum", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("EmployeeActionTypeEnums");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.EmployeeStatusEnum", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("EmployeeStatusEnums");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.EmployeeTimelineEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeActionTypeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeStatusCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTs")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeActionTypeCode");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeStatusCode");

                    b.ToTable("EmployeeTimelineEntries");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.TaskLogEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTs")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskOutcomeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTypeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskOutcomeCode");

                    b.HasIndex("TaskTypeCode");

                    b.ToTable("TaskLogEntries");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.TaskOutcomeEnum", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("TaskOutcomeEnums");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.TaskTypeEnum", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("TaskTypeEnums");
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.Employee", b =>
                {
                    b.HasOne("ExitSurveyAdmin.Models.EmployeeStatusEnum", "CurrentEmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentEmployeeStatusCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.EmployeeTimelineEntry", b =>
                {
                    b.HasOne("ExitSurveyAdmin.Models.EmployeeActionTypeEnum", "EmployeeActionType")
                        .WithMany("TimelineEntries")
                        .HasForeignKey("EmployeeActionTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExitSurveyAdmin.Models.Employee", "Employee")
                        .WithMany("TimelineEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExitSurveyAdmin.Models.EmployeeStatusEnum", "EmployeeStatus")
                        .WithMany("TimelineEntries")
                        .HasForeignKey("EmployeeStatusCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ExitSurveyAdmin.Models.TaskLogEntry", b =>
                {
                    b.HasOne("ExitSurveyAdmin.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExitSurveyAdmin.Models.TaskOutcomeEnum", "TaskOutcome")
                        .WithMany("TaskLogEntries")
                        .HasForeignKey("TaskOutcomeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExitSurveyAdmin.Models.TaskTypeEnum", "TaskType")
                        .WithMany("TaskLogEntries")
                        .HasForeignKey("TaskTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
